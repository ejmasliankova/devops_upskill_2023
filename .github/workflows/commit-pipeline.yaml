name: Commit pipeline
run-name: ${{ github.actor }} made a commit

on:
  push:
    branches:
    - ftr/*

jobs:
  editorconfig:
    name: "Check for .editorconfig"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: check-editorconfig-existence
      if: ${{ hashFiles('.editorconfig') == '' }}
      run: echo '.editorconfig exists'

    - uses: editorconfig-checker/action-editorconfig-checker@main
    - run: editorconfig-checker

  pylint:
    name: "Check with Pylint"
    runs-on: ubuntu-latest
    steps:
    - uses: cclauss/GitHub-Action-for-pylint@0.7.0

  black:
    name: "Check formatting with Black"
    runs-on: ubuntu-latest
    steps:
    - uses: psf/black@stable

  markdown-check:
    name: "Check markdown"
    runs-on: ubuntu-latest
    steps:
    - uses: nosborn/github-action-markdown-cli@v3.3.0
      with:
        files: .

  unit-test:
    name: "Run unit test"
    runs-on: ubuntu-latest
    needs:
    - editorconfig
    - pylint
    - black
    - markdown-check
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - run: pip install -r requirements.txt
      working-directory: ./app
    - run: python -m unittest
      working-directory: ./app

  gitleaks:
    name: "Check for leaks in secrets with gitleaks"
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sonar_cloud:
    name: "Run SonarCloud"
    runs-on: ubuntu-latest
    needs: gitleaks
    steps:
    - uses: actions/checkout@v4
    - uses: AppThreat/sast-scan-action@master
      with:
        type: "python"

  vulnerability:
    name: "Check for vulnerabilities with Snyk"
    runs-on: ubuntu-latest
    needs: sonar_cloud
    steps:
    - uses: actions/checkout@v4
    - uses: snyk/actions/python-3.10@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  docker-build-push:
    name: "Build Docker image, check for vulneratibilities and push"
    runs-on: ubuntu-latest
    needs: vulnerability
    steps:
    - name: "Checkout"
      uses: actions/checkout@v4
    - name: "Set up QEMU"
      uses: docker/setup-qemu-action@v3
    - name: "Set up BuildX"
      uses: docker/setup-buildx-action@v3
    - name: "Login to Docker Hub"
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN}}
    - name: "Build and export to Docker (without push)"
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: evelonche/app:${{ github.sha }}
    # - name: "Scan image"
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     image-ref:
    #     format: 'table'
    #     exit-code: '1'
    #     ignore-unfixed: true
    #     vuln-type: 'os,library'
    #     severity: 'CRITICAL,HIGH'


